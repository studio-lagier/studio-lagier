"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var POSTCSS_LOADER = "postcss-loader";

var isPostCssLoader = function isPostCssLoader() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      loader = _ref.loader;

  return loader === POSTCSS_LOADER;
};

var getOneOf = function getOneOf() {
  var _ref2 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      oneOf = _ref2.oneOf;

  if (oneOf) {
    return oneOf;
  }

  return false;
};

var defaultOptions = {
  autoPrefixer: true,
  cssInJs: false
};

var _default = function _default() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  return {
    webpack: function webpack(config) {
      var opts = _objectSpread({}, defaultOptions, {}, options);

      var rules = config.module.rules;

      var _rules$find = rules.find(getOneOf),
          oneOf = _rules$find.oneOf;

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = oneOf[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var item = _step.value;
          var postcssLoader = item && item.loader && item.loader.find(isPostCssLoader);

          if (postcssLoader && postcssLoader.options && postcssLoader.options.plugins) {
            var plugins = postcssLoader.options.plugins;
            var tailwind = [require("tailwindcss")];

            if (opts.autoPrefixer) {
              tailwind.push(require('autoprefixer'));
            }

            Object.assign(postcssLoader.options, {
              plugins: [].concat(tailwind, _toConsumableArray(plugins.length ? plugins : []))
            });
            break;
          }
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator["return"] != null) {
            _iterator["return"]();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      if (opts.cssInJs) {
        config.node = {
          fs: 'empty'
        };
      }

      return config;
    }
  };
};

exports["default"] = _default;